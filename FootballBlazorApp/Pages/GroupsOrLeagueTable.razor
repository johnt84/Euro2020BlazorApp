@page "/groupsOrLeagueTable"

@using Microsoft.Extensions.Configuration;

@inject IFootballDataService FootballDataService;
@inject IConfiguration Configuration;

@if (Convert.ToBoolean(Configuration["HasGroups"].ToString()))
{
    <h1 style="padding-bottom: 20px;">Groups</h1>
}

@if(groupsOrLeagueTable == null && !isInvalidGroupsOrLeagueTable)
{
    <p><em>Loading...</em></p>
}
else if (isInvalidGroupsOrLeagueTable)
{
    <ErrorMessage Error="@ErrorMessage"></ErrorMessage>
}
else if (!groupsOrLeagueTable.Any())
{
    <ErrorMessage Error="No groups or league table could be found"></ErrorMessage>
}
else
{
    @foreach (var groupOrLeagueTable in groupsOrLeagueTable)
    {
        <GroupOrLeagueTable GroupOrLeagueTableModel="groupOrLeagueTable"></GroupOrLeagueTable>
    }
}

@code {
    private List<FootballShared.Models.GroupOrLeagueTableModel> groupsOrLeagueTable = null;

    private bool isInvalidGroupsOrLeagueTable = false;

    private string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            groupsOrLeagueTable = await FootballDataService.GetGroupsOrLeagueTableAsync();
            isInvalidGroupsOrLeagueTable = false;
        }
        catch (Exception ex) when (ex.Message.Contains(Constants.TOO_MANY_REQUESTS_ERROR_CODE.ToString()))
        {
            isInvalidGroupsOrLeagueTable = true;
            ErrorMessage = Constants.TOO_MANY_REQUESTS_ERROR_MESSAGE;
        }
        catch (Exception)
        {
            isInvalidGroupsOrLeagueTable = true;
            ErrorMessage = $"Could not retrieve any groups or league table";
        }
    }
}

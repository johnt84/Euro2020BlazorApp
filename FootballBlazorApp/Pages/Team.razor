@page "/team/{TeamID:int}"

@inject IFootballDataService FootballDataService;

@if (team == null && !isInvalidTeam)
{
    <p><em>Loading...</em></p>
}
else if (isInvalidTeam)
{
    <ErrorMessage Error="@ErrorMessage"></ErrorMessage>
}
else if (team.TeamID == 0)
{
    <ErrorMessage Error="The team could not be found"></ErrorMessage>
}
else
{
    <table style="margin-bottom: 20px;">
        <tr>
            <td style="padding-right: 12px;"><img src="@team.TeamCrestUrl" width="60" height="75" /></td>
            <td><h1>@team.Name</h1></td>
        </tr>
    </table>

    <table class="table" style="width: 630px;">
        <tr>
            <th>Year Founded</th>
            <th>Website</th>
            <th>Team Colours</th>
            <th>Home Stadium</th>
        </tr>
        <tr>
            <td>@team.YearFounded</td>
            <td><a href="@team.Website">Team Website</a></td>
            <td>@team.TeamColours</td>
            <td>@team.HomeStadium</td>
        </tr>
    </table>

    <Squad PlayersByPosition="team.SquadByPosition" CoachingStaff="team.CoachingStaff"></Squad>

    @if (fixturesAndResultsExist)
    {
        <h2 style="padding-bottom: 10px;">Fixtures</h2>

        <button class="toggleFixtureAndResultsVisibilityButton" @onclick="@ToggleVisbilityOfFixtures">@hideOrShow Fixtures</button>
        @if (FixturesVisible)
        {
            <table class="table" style="width: 450px; margin-bottom: 20px;">
                @foreach (var fixtureandResultByDay in team.FixturesAndResultsByDays)
                {
                    <FixturesAndResultsByDayComponent ComponentSource="Enums.ComponentSource.Team" FixturesAndResultsByDayModel="fixtureandResultByDay"></FixturesAndResultsByDayComponent>
                }
            </table>
        }
    }
}

@code {
    private FootballShared.Models.Team team = null;

    private bool fixturesAndResultsExist => team?.FixturesAndResultsByDays != null
                                            && (team?.FixturesAndResultsByDays?.Count ?? 0) > 0;

    private bool FixturesVisible { get; set; } = false;

    private string hideOrShow => FixturesVisible ? "Hide" : "Show";

    private bool isInvalidTeam = false;

    private string ErrorMessage { get; set; }

    [Parameter]
    public int TeamID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            team = await FootballDataService.GetTeam(TeamID);
            isInvalidTeam = false;
        }
        catch (Exception ex) when (ex.Message.Contains(Constants.TOO_MANY_REQUESTS_ERROR_CODE.ToString()))
        {
            isInvalidTeam = true;
            ErrorMessage = Constants.TOO_MANY_REQUESTS_ERROR_MESSAGE;
        }
        catch (Exception)
        {
            isInvalidTeam = true;
            ErrorMessage = $"Could not retrieve a team with team id of {TeamID}";
        }
    }

    private void ToggleVisbilityOfFixtures()
    {
        FixturesVisible = !FixturesVisible;
    }
}

@page "/fixturesandresults"

@using FootballBlazorApp.Components;
 
@inject IFootballDataService FootballDataService;

<h1 style="padding-bottom: 10px;">Fixtures & Results</h1>

@if (fixturesAndResultsByDays == null && !isInvalidFixturesAndResults)
{
    <p><em>Loading...</em></p>
}
else if (isInvalidFixturesAndResults)
{
    <ErrorMessage Error="@ErrorMessage"></ErrorMessage>
}
else if (!fixturesAndResultsByDays.Any())
{
    <ErrorMessage Error="No fixtures could be found"></ErrorMessage>
}
else
{
    @foreach (var fixtureandResultByDay in fixturesAndResultsByDays)
    {
        <FixturesAndResultsByDayComponent ComponentSource="Enums.ComponentSource.FixturesAndResults" FixturesAndResultsByDayModel="fixtureandResultByDay"></FixturesAndResultsByDayComponent>
    }
}

@code {
    private List<FootballShared.Models.FixturesAndResultsByDay> fixturesAndResultsByDays = null;

    private bool isInvalidFixturesAndResults = false;

    private string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            fixturesAndResultsByDays = await FootballDataService.GetFixturesAndResultsByDaysAsync();
            isInvalidFixturesAndResults = false;
        }
        catch (Exception ex) when (ex.Message.Contains(Constants.TOO_MANY_REQUESTS_ERROR_CODE.ToString()))
        {
            isInvalidFixturesAndResults = true;
            ErrorMessage = Constants.TOO_MANY_REQUESTS_ERROR_MESSAGE;
        }
        catch (Exception)
        {
            isInvalidFixturesAndResults = true;
            ErrorMessage = $"Could not retrieve any fixtures & results";
        }
    }
}

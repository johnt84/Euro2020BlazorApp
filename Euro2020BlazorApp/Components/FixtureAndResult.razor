@using Models.Enums;
@using Models;

<tr>
    <td>@GetFixtureLabel(fixtureAndResult)</td>
    <td>@GetTeamName(fixtureAndResult.HomeTeam)</td>
    <td>@GetScoreOrKickOffTime(fixtureAndResult)</td>
    <td>@GetTeamName(fixtureAndResult.AwayTeam)</td>
</tr>

@code {
    private const string TBD = "TBD";

    private string GetStageNameForDisplay(Enums.Stage stage) => stage.ToString().Replace("_", " ");

    private string GetStageName(Models.FixtureAndResult fixtureAndResult) =>
                                        fixtureAndResult.Stage == Enums.Stage.Group
                                        ? fixtureAndResult.Group.Name
                                        : GetStageNameForDisplay(fixtureAndResult.Stage);

    private bool TeamExists(Team team) => team != null && !string.IsNullOrEmpty(team.Name);

    private string GetTeamName(Team team) => TeamExists(team) ? team.Name : TBD;

    private string GetScore(Models.FixtureAndResult fixtureAndResult) => $"{fixtureAndResult.HomeTeamGoals} - {fixtureAndResult.AwayTeamGoals}";

    private string GetScoreOrKickOffTime(Models.FixtureAndResult fixtureAndResult) =>
                                    fixtureAndResult.GameStatus == Enums.GameStatus.Scheduled
                                    ? fixtureAndResult.FixtureDate.ToString("HH:mm")
                                    : GetScore(fixtureAndResult);

    [Parameter]
    public Enums.FixtureSource fixtureSource { get; set; }

    [Parameter]
    public Models.FixtureAndResult fixtureAndResult { get; set; }

    private string GetFixtureLabel(Models.FixtureAndResult fixtureAndResult)
    {
        string fixtureLabel = string.Empty;

        switch (fixtureSource)
        {
            case Enums.FixtureSource.FixturesByDay:
                fixtureLabel = GetStageName(fixtureAndResult);
                break;
            case Enums.FixtureSource.FixturesByGroup:
                fixtureLabel = fixtureAndResult.FixtureDate.Date.ToString("dddd dd MMMM yyyy");
                break;
            default:
                break;
        }

        return fixtureLabel;
    }
}
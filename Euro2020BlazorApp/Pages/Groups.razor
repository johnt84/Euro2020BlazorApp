@page "/groups"

@using Euro2020BlazorApp.Models;
@using Euro2020BlazorApp.Data;
@using Euro2020BlazorApp.Components;
@inject IFootballDataService FootballDataService;

<h1 style="padding-bottom: 20px;">Groups</h1>

@if (groups == null && !isInvalidGroups)
{
    <p><em>Loading...</em></p>
}
else if (isInvalidGroups)
{
    <ErrorMessage Error="@ErrorMessage"></ErrorMessage>
}
else if (!groups.Any())
{
    <ErrorMessage Error="No groups could be found"></ErrorMessage>
}
else
{
    @foreach (var group in groups)
    {
        <Group GroupModel="group"></Group>
    }
}

@code {
    private List<Models.Group> groups = null;

    private bool isInvalidGroups = false;

    private string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            groups = await FootballDataService.GetGroups();
            isInvalidGroups = false;
        }
        catch (Exception ex) when (ex.Message.Contains(Constants.TOO_MANY_REQUESTS_ERROR_CODE.ToString()))
        {
            isInvalidGroups = true;
            ErrorMessage = Constants.TOO_MANY_REQUESTS_ERROR_MESSAGE;
        }
        catch (Exception)
        {
            isInvalidGroups = true;
            ErrorMessage = $"Could not retrieve any groups";
        }
    }
}
